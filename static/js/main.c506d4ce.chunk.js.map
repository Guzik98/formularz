{"version":3,"sources":["components/mainPage/components/buttonStyle.ts","components/mainPage/components/Form.tsx","components/mainPage/components/Display.tsx","components/mainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledTextField","styled","TextField","StyledFormControl","FormControl","StyledButton","Button","StyledTable","Table","Form","book","setBook","submit","error","firstCharToUpperCase","value","charAt","toUpperCase","slice","className","required","label","margin","variant","title","length","helperText","onChange","e","prev","target","author","InputLabel","id","Select","labelId","category","defaultValue","input","OutlinedInput","MenuItem","priority","onClick","Display","books","TableContainer","component","Paper","sx","width","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","index","border","scope","MainPage","useState","setBooks","process","setProcess","firstRender","setFirstRender","setError","useEffect","localStorage","setItem","JSON","stringify","console","log","parse","getItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c506d4ce.chunk.js","sourcesContent":["import { Button, FormControl, styled, Table, TextField } from '@mui/material';\r\n\r\n\r\nexport const StyledTextField = styled(TextField) `\r\n  width: 400px;\r\n    '& p': {\r\n      color: red!important;\r\n    },\r\n`\r\n\r\nexport  const StyledFormControl = styled(FormControl) `\r\n  margin-top: 10px;\r\n  width: 400px;\r\n`\r\n\r\nexport const StyledButton = styled(Button) `\r\n  width: 400px;\r\n  height: 40px;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  background-color: #f5e5e5;\r\n  color: #0c0808;\r\n\r\n  &:hover {\r\n    background-color: #e1cfcf;\r\n  }\r\n`\r\nexport const StyledTable = styled(Table) `\r\n  \r\n`","import React from 'react';\r\nimport { InputLabel, MenuItem, OutlinedInput, Select } from '@mui/material';\r\nimport { StyledTextField, StyledFormControl, StyledButton } from './buttonStyle';\r\nimport { FormDataType } from '../types';\r\n\r\nconst Form = ({ book, setBook, submit, error }: FormDataType): JSX.Element => {\r\n    const firstCharToUpperCase = (value : string) => {\r\n        return value.charAt(0).toUpperCase() + value.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div className={error ? 'form error' : 'form'}>\r\n            <h2>\r\n                Add new book\r\n            </h2>\r\n            <StyledTextField\r\n                required\r\n                label='Book Title'\r\n                margin='dense'\r\n                variant='outlined'\r\n                error={(error && book.title.length < 1) && true}\r\n                value={book.title}\r\n                helperText={(error && book.title.length < 1) && 'This field is required' }\r\n                onChange={(e)=> {\r\n                    setBook((prev) => ({ ...prev, title: firstCharToUpperCase(e.target.value) }))\r\n                }}\r\n            />\r\n            <StyledTextField\r\n                label='Book Author'\r\n                margin='dense'\r\n                variant='outlined'\r\n                value={book.author}\r\n                required\r\n                error={(error && book.author.length < 3) && true}\r\n                helperText={(error && book.author.length < 3) && 'This field need at least 3 characters' }\r\n                onChange={(e)=> {\r\n                    setBook((prev) => ({ ...prev, author: firstCharToUpperCase(e.target.value) }))\r\n                }}\r\n            />\r\n            <StyledFormControl>\r\n                <InputLabel id=\"demo-multiple-name-label\">Category</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-multiple-name-label\"\r\n                    id=\"demo-multiple-name\"\r\n                    value={book.category}\r\n                    defaultValue={'Biology'}\r\n                    onChange={(e)=> {\r\n                        setBook((prev) => ({...prev, category: e.target.value }))\r\n                    }}\r\n                    input={<OutlinedInput label=\"Name\" />}\r\n                >\r\n                    <MenuItem value='Biology'>Biology</MenuItem>\r\n                    <MenuItem value='It'>It</MenuItem>\r\n                    <MenuItem value='Fantasy'>Fantasy</MenuItem>\r\n                </Select>\r\n            </StyledFormControl>\r\n            <StyledFormControl>\r\n                <InputLabel id=\"demo-multiple-name-label\">Priority</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-multiple-name-label\"\r\n                    id=\"demo-multiple-name\"\r\n                    value={book.priority}\r\n                    label=\"piority\"\r\n                    onChange={(e)=> {\r\n                        setBook((prev) => ({...prev, priority: e.target.value as number}))\r\n                    }}\r\n                    input={<OutlinedInput label=\"Name\" />}\r\n                >\r\n                    <MenuItem value={1}>One</MenuItem>\r\n                    <MenuItem value={2}>Two</MenuItem>\r\n                    <MenuItem value={3}>Three</MenuItem>\r\n                    <MenuItem value={4}>Four</MenuItem>\r\n                    <MenuItem value={5}>Five</MenuItem>\r\n                </Select>\r\n            </StyledFormControl>\r\n            <StyledButton onClick={()=> submit()}>\r\n                submit\r\n            </StyledButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport { Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\r\nimport { DisplayDataType } from '../types';\r\nimport { StyledTable } from './buttonStyle';\r\n\r\nconst Display = ( { books }: DisplayDataType): JSX.Element => {\r\n    return (\r\n        <div className='display-book'>\r\n            <TableContainer component={Paper}>\r\n                <StyledTable sx={{ width: 'inherit' }} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Id</TableCell>\r\n                            <TableCell align=\"center\">Title</TableCell>\r\n                            <TableCell align=\"center\">Author</TableCell>\r\n                            <TableCell align=\"center\">Category</TableCell>\r\n                            <TableCell align=\"center\">Priority</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {books.map((row, index) => (\r\n                            <TableRow\r\n                                key={index}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{index}</TableCell>\r\n                                <TableCell align=\"center\">{row.title}</TableCell>\r\n                                <TableCell align=\"center\">{row.author}</TableCell>\r\n                                <TableCell align=\"center\">{row.category}</TableCell>\r\n                                <TableCell align=\"center\">{row.priority}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </StyledTable>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React, { useEffect, useState } from 'react';\r\nimport './main-page.sass';\r\nimport { BookType } from '../../Types/book-type';\r\nimport Form from './components/Form';\r\nimport Display from './components/Display';\r\n\r\nconst MainPage = (): JSX.Element => {\r\n\r\n    const [book, setBook] = useState<BookType>({\r\n        title: '',\r\n        author: '',\r\n        priority: 1,\r\n        category: 'Biology'\r\n    });\r\n\r\n    const [books, setBooks]  = useState<BookType[]>([]);\r\n    const [process, setProcess] = useState<boolean>(false);\r\n    const [firstRender, setFirstRender] = useState<boolean>(true);\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const submit = () => {\r\n        setProcess(true);\r\n    }\r\n\r\n    useEffect( () => {\r\n        if(process){\r\n            if(book.title.length > 1 && book.author.length > 3){\r\n                setBooks(prev => [...prev, {...book}]);\r\n                setBook( {...book, title: '',  author: ''})\r\n                setError(false);\r\n            } else {\r\n                setError(true);\r\n            }\r\n        }\r\n        setProcess(false);\r\n    },[process])\r\n\r\n    useEffect( () => {\r\n        if(!firstRender){\r\n            localStorage.setItem('books', JSON.stringify(books));\r\n        }\r\n        setFirstRender(false);\r\n    },[books])\r\n\r\n    useEffect( () => {\r\n        console.log(JSON.parse(localStorage.getItem('books') || '[]'))\r\n        setBooks(JSON.parse(localStorage.getItem('books') || '[]'));\r\n    },[])\r\n\r\n    return (\r\n        <div className='main-page'>\r\n            <Display books={books}/>\r\n            <Form book={book} setBook={setBook} submit={submit} error={error}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport MainPage from './components/mainPage/MainPage';\n\nconst App = (): JSX.Element => {\n\n  return (\n    <div className=\"App\">\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n          <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}